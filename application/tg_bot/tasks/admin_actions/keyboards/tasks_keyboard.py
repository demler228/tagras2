from aiogram.utils.keyboard import InlineKeyboardBuilder
from .callback_factories import (
    TaskAdminCallbackFactory,
    BackTasksListAdminCallbackFactory,
    BackToMenuAdminCallbackFactory,
    TaskActionCallbackFactory,
    UserIdCallbackFactory
)

from domain.tasks.db_bl import TasksDbBl
from utils.data_state import DataSuccess

def task_admin_panel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É", callback_data="create_task")
    builder.button(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏", callback_data="view_tasks")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=BackToMenuAdminCallbackFactory())
    builder.adjust(1)
    return builder.as_markup()

def task_action_keyboard(task_id):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É",
        callback_data=TaskActionCallbackFactory(action="edit", task_id=task_id)
    )
    builder.button(
        text="–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
        callback_data=TaskActionCallbackFactory(action="reassign", task_id=task_id)
    )
    builder.button(
        text="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
        callback_data=TaskActionCallbackFactory(action="delete", task_id=task_id)
    )
    builder.adjust(1)
    return builder.as_markup()

def back_to_tasks_list():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π",
        callback_data=BackTasksListAdminCallbackFactory()
    )
    builder.adjust(1)
    return builder.as_markup()


def build_user_selection_keyboard(all_users: list, selected_users: list = None):
    if selected_users is None:
        selected_users = []

    builder = InlineKeyboardBuilder()
    for user in all_users:
        user_label = f"{user.username} ‚úÖ" if user.id in selected_users else user.username
        callback_data = UserIdCallbackFactory(user_id=user.id).pack()
        builder.button(text=user_label, callback_data=callback_data)

    builder.button(text="–ì–æ—Ç–æ–≤–æ", callback_data="done")
    builder.adjust(1)

    return builder.as_markup()

def menu_of_action_after_creating():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–∏—Å–≤–æ–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="assign_task")
    builder.adjust(1)
    return builder.as_markup()



def get_all_tasks_button():
    builder = InlineKeyboardBuilder()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    data_state = TasksDbBl.get_all_tasks()
    if isinstance(data_state, DataSuccess):
        for task in data_state.data:
            builder.button(
                text=task.name,
                callback_data=TaskAdminCallbackFactory(task_id=task.id)
            )
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        builder.button(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π", callback_data="error")

    builder.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º",
        callback_data=BackToMenuAdminCallbackFactory()
    )
    builder.adjust(1)
    return builder.as_markup()


