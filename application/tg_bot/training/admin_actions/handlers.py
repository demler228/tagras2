from random import randint
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ContentType
from aiogram.client.session.middlewares.request_logging import logger
import os
from pathlib import Path

from application.tg_bot.training.admin_actions.keyboards.theme_list_keyboard import ThemeListCallback, \
    get_theme_list_keyboard, ThemeCallback
from application.tg_bot.training.admin_actions.keyboards.theme_material_menu_keyboard import \
    get_theme_material_menu_keyboard
from application.tg_bot.training.admin_actions.keyboards.theme_menu_keyboard import get_theme_menu_keyboard
from application.tg_bot.training.admin_actions.keyboards.theme_choose_materials_keyboard import \
    ThemeChooseMaterialsCallback, get_theme_choose_materials_keyboard
from application.tg_bot.training.entities.materials import Material
from application.tg_bot.training.entities.theme import Theme
from domain.training.education.db_bl import EducationBL
from utils.data_state import DataSuccess
from domain.quiz.db_dal import FileRepository, WebRepository, QuizRepository, QuizDAL
from utils.logs import admin_logger

router = Router()

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
TEMP_DIR = Path("temp_files")
TEMP_DIR.mkdir(exist_ok=True)

class AdminStates(StatesGroup):
    theme_menu = State()
    change_theme_name = State()
    create_theme_name = State()
    create_material_name = State()
    create_material_url = State()
    change_material_name = State()
    change_material_url = State()

emoji_books = ['üìí', 'üìï', 'üìó', 'üìò', 'üìô']

async def get_theme(state, object, keyboard_markup, callback_data=None):
    await state.set_state(AdminStates.theme_menu)
    message = None
    data_state = None
    theme = None
    material_id = None

    if isinstance(object, Message):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç –∫–æ–≥–æ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: callback –∏–ª–∏ message
        message = object
        data_state = EducationBL.get_themes()

        if isinstance(data_state, DataSuccess):
            await message.delete()
            theme_list = data_state.data
            changed_theme_id = (await state.get_data())['theme'].id
            theme = next((theme for theme in theme_list if theme.id == changed_theme_id), None)
            data_state = EducationBL.get_materials(theme.id)

            if callback_data:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ material_id
                if isinstance(data_state, DataSuccess):
                    materials = data_state.data
                    material_id = callback_data.material_id
                    material = next((material for material in materials if material.id == material_id), None)
                    await state.update_data({'material': material})
                else:
                    await message.answer(f'‚ùå {data_state.error_message}')
        else:
            await message.answer(f'‚ùå {data_state.error_message}')
    else:
        message = object.message
        await message.delete()
        theme_list = (await state.get_data())['theme_list']
        theme = next((theme for theme in theme_list if theme.id == callback_data.theme_id), None)
        data_state = EducationBL.get_materials(theme.id)

    if isinstance(data_state, DataSuccess):
        materials = data_state.data
        materials_text = 'üßê –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ—Ç—É' if len(materials) == 0 else \
            '\n'.join([f'<u><b>[{i}]{material.title}:\n{material.url}</b></u>'
                       if material_id and material.id == material_id
                       else f'[{i}]{material.title}:\n{material.url}'
                       for i, material in enumerate(materials)])
        message = await message.answer(
            f"{emoji_books[randint(0, len(emoji_books) - 1)]} <b>{theme.name}</b>\n\n {materials_text}",
            reply_markup=keyboard_markup, parse_mode='HTML')
    else:
        await message.answer(f'‚ùå {data_state.error_message}')

    await state.update_data({'theme': theme, 'message': message})

async def get_theme_list_button(callback_query: types.CallbackQuery, state: FSMContext,
                                callback_data: ThemeListCallback = None):
    await callback_query.message.delete()

    data_state = EducationBL.get_themes()
    if isinstance(data_state, DataSuccess):
        if 'page' in (await state.get_data()) and callback_data is None:
            page = (await state.get_data())['page']
        else:
            page = callback_data.page if callback_data is not None else 1

        await state.set_data({'theme_list': data_state.data, 'page': page})

        await callback_query.message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
                                            reply_markup=get_theme_list_keyboard(data_state.data, page))
    else:
        await callback_query.message.answer(f'‚ùå {data_state.error_message}')

@router.callback_query(F.data == "training_button_admin")
async def handle_theme_list_button(callback_query: types.CallbackQuery, state: FSMContext):
    await get_theme_list_button(callback_query, state)

@router.callback_query(ThemeListCallback.filter())
async def handle_theme_list_button_by_callback(callback_query: types.CallbackQuery, state: FSMContext,
                                               callback_data: ThemeListCallback):
    await get_theme_list_button(callback_query, state, callback_data)

@router.callback_query(ThemeChooseMaterialsCallback.filter())
async def handle_theme_choose_materials_button(callback_query: types.CallbackQuery, callback_data: ThemeChooseMaterialsCallback, state: FSMContext):
    await get_theme(state, callback_query.message, get_theme_material_menu_keyboard(), callback_data=callback_data)

@router.callback_query(ThemeCallback.filter())
async def handle_theme_button(callback_query: types.CallbackQuery, callback_data: ThemeCallback, state: FSMContext):
    await get_theme(state, callback_query, get_theme_menu_keyboard(), callback_data=callback_data)

@router.callback_query(F.data == "back_theme_button")
async def handle_theme_button(callback_query: types.CallbackQuery, state: FSMContext):
    await get_theme(state, callback_query.message, get_theme_menu_keyboard())

@router.callback_query(F.data == "theme_delete_button")
async def handle_theme_delete_button(callback_query: types.CallbackQuery, state: FSMContext):
    theme = (await state.get_data())['theme']
    data_state = EducationBL.theme_delete(theme)

    if isinstance(data_state, DataSuccess):
        admin_logger.info(
            f'–∞–¥–º–∏–Ω {callback_query.message.chat.full_name} —É–¥–∞–ª–∏–ª —Ç–µ–º—É {theme.name}')
        await get_theme_list_button(callback_query, state)
        await callback_query.message.answer(f'–¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞!')
    else:
        await callback_query.message.answer(f'‚ùå {data_state.error_message}')

@router.callback_query(F.data == "theme_create_button")
async def theme_create_name(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.create_theme_name)
    await callback_query.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã")

@router.message(F.text, AdminStates.create_theme_name)
async def theme_create(message: Message, state: FSMContext):
    theme = Theme(name=message.text)
    data_state = EducationBL.theme_create(theme)
    if isinstance(data_state, DataSuccess):
        theme.id = data_state.data
        admin_logger.info(
            f'–∞–¥–º–∏–Ω {message.chat.full_name} —Å–æ–∑–¥–∞–ª —Ç–µ–º—É {theme.name}')
        await state.update_data({'theme': theme})
        await get_theme(state, message, get_theme_menu_keyboard())
    else:
        await message.answer(f'‚ùå {data_state.error_message}')

@router.callback_query(F.data == "theme_change_name_button")
async def theme_change_name(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.change_theme_name)
    await callback_query.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã")

@router.message(F.text, AdminStates.change_theme_name)
async def theme_changed_name(message: Message, state: FSMContext):
    theme = (await state.get_data())['theme']
    old_theme_name = theme.name
    theme.name = message.text
    data_state = EducationBL.theme_update(theme)

    if isinstance(data_state, DataSuccess):
        admin_logger.info(
            f'–∞–¥–º–∏–Ω {message.chat.full_name} –æ–±–Ω–æ–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å {old_theme_name} –Ω–∞ {theme.name}')
        await (await state.get_data())['message'].delete()
        await get_theme(state, message, get_theme_menu_keyboard())
    else:
        await message.answer(f'‚ùå {data_state.error_message}')

@router.callback_query(F.data == "back_theme_choose_materials")
async def handle_back_theme_choose_button(callback_query: types.CallbackQuery, state: FSMContext):
    theme_id = (await state.get_data())['theme'].id
    data_state = EducationBL.get_materials(theme_id)

    if isinstance(data_state, DataSuccess):
        await get_theme(state, callback_query.message, get_theme_choose_materials_keyboard(data_state.data))
    else:
        await callback_query.message.answer(f'‚ùå {data_state.error_message}')

@router.callback_query(F.data == "theme_change_materials_button")
async def handle_back_theme_button(callback_query: types.CallbackQuery, state: FSMContext):
    theme_id = (await state.get_data())['theme'].id
    data_state = EducationBL.get_materials(theme_id)

    if isinstance(data_state, DataSuccess):
        await get_theme(state, callback_query.message, get_theme_choose_materials_keyboard(data_state.data))
    else:
        await callback_query.message.answer(f'‚ùå {data_state.error_message}')

@router.callback_query(F.data == "theme_create_material_button")
async def theme_create_material_name(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.create_material_name)
    await callback_query.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")

@router.message(F.text, AdminStates.create_material_name)
async def faq_create_answer(message: Message, state: FSMContext):
    await state.update_data({'material_name': message.text})
    await state.set_state(AdminStates.create_material_url)
    await message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ URL –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (PDF, Word, –≤–∏–¥–µ–æ)")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (URL)
@router.message(F.text, AdminStates.create_material_url)
async def theme_created_material_url(message: Message, state: FSMContext):
    theme = (await state.get_data())['theme']
    material = Material(
        title=(await state.get_data())['material_name'],
        url=message.text,
        theme_id=theme.id
    )
    data_state = EducationBL.material_create(material)

    if isinstance(data_state, DataSuccess):
        admin_logger.info(
            f'–∞–¥–º–∏–Ω {message.chat.full_name} —Å–æ–∑–¥–∞–ª –º–∞—Ç–µ—Ä–∏–∞–ª {material.title}')
        await (await state.get_data())['message'].delete()
        await get_theme(
            state,
            message,
            get_theme_material_menu_keyboard(),
            ThemeChooseMaterialsCallback(material_id=data_state.data)
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL
        if not material.url.startswith(('http://', 'https://')):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é URL (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://).")
            return

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text = WebRepository.process_url(material.url)
            print(text)
            if not text:
                await message.answer("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            token = QuizRepository.get_token()
            if not token:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
                return

            quiz_data = QuizRepository.get_quiz_questions(token, text)
            if isinstance(quiz_data, DataSuccess):
                save_result = QuizDAL.save_quiz(quiz_data.data, theme.name)
                if isinstance(save_result, DataSuccess):
                    await message.answer("‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                else:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {save_result.error_message}")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {quiz_data.error_message}")
        except Exception as e:
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {str(e)}")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {data_state.error_message}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (PDF, Word, –≤–∏–¥–µ–æ)
@router.message(F.content_type.in_({ContentType.DOCUMENT, ContentType.VIDEO}), AdminStates.create_material_url)
async def theme_created_material_file(message: Message, state: FSMContext, bot):
    theme = (await state.get_data())['theme']
    material_name = (await state.get_data())['material_name']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
    if message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name
    elif message.video:
        file_id = message.video.file_id
        file_name = f"{message.video.file_id}.mp4"  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PDF, Word –∏ –≤–∏–¥–µ–æ.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_info = await bot.get_file(file_id)
    file_path = TEMP_DIR / file_name
    await bot.download_file(file_info.file_path, file_path)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Material —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É
    material = Material(
        title=material_name,
        url=str(file_path),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞–∫ URL
        theme_id=theme.id
    )
    data_state = EducationBL.material_create(material)

    if isinstance(data_state, DataSuccess):
        admin_logger.info(
            f'–∞–¥–º–∏–Ω {message.chat.full_name} —Å–æ–∑–¥–∞–ª –º–∞—Ç–µ—Ä–∏–∞–ª {material.title}')
        await (await state.get_data())['message'].delete()
        await get_theme(
            state,
            message,
            get_theme_material_menu_keyboard(),
            ThemeChooseMaterialsCallback(material_id=data_state.data)
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é FileRepository
        text = FileRepository.process_file(str(file_path))
        print(text)
        if text:
            token = QuizRepository.get_token()
            if token:
                quiz_data = QuizRepository.get_quiz_questions(token, text)
                if isinstance(quiz_data, DataSuccess):
                    save_result = QuizDAL.save_quiz(quiz_data.data, theme.name)
                    if not isinstance(save_result, DataSuccess):
                        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {save_result.error_message}')
            else:
                await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã')
        else:
            await message.answer('‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã')

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        os.remove(file_path)
    else:
        await message.answer(f'‚ùå {data_state.error_message}')

@router.callback_query(F.data == "change_material_name_button")
async def change_material_name(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.change_material_name)
    await callback_query.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")

@router.message(F.text, AdminStates.change_material_name)
async def material_changed_name(message: Message, state: FSMContext):
    material = (await state.get_data())['material']
    old_material_title = material.title
    material.title = message.text
    data_state = EducationBL.material_update(material)

    if isinstance(data_state, DataSuccess):
        admin_logger.info(
            f'–∞–¥–º–∏–Ω {message.chat.full_name} –æ–±–Ω–æ–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å {old_material_title} –Ω–∞ {material.title}')
        await (await state.get_data())['message'].delete()
        await get_theme(state, message, get_theme_material_menu_keyboard(),
                        ThemeChooseMaterialsCallback(material_id=material.id))
    else:
        await message.answer(f'‚ùå {data_state.error_message}')

@router.callback_query(F.data == "change_material_url_button")
async def change_material_url(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.change_material_url)
    await callback_query.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (PDF, Word, –≤–∏–¥–µ–æ)")

@router.message(F.text, AdminStates.change_material_url)
async def changed_material_url(message: Message, state: FSMContext):
    material = (await state.get_data())['material']
    material.url = message.text
    data_state = EducationBL.material_update(material)

    if isinstance(data_state, DataSuccess):
        admin_logger.info(
            f'–∞–¥–º–∏–Ω {message.chat.full_name} –æ–±–Ω–æ–≤–∏–ª —Å—Å—ã–ª–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ {material.url}')
        await (await state.get_data())['message'].delete()
        await get_theme(state, message, get_theme_material_menu_keyboard(),
                        ThemeChooseMaterialsCallback(material_id=material.id))
    else:
        await message.answer(f'‚ùå {data_state.error_message}')

@router.callback_query(F.data == "material_delete_button")
async def change_material_url(callback_query: types.CallbackQuery, state: FSMContext):
    material = (await state.get_data())['material']
    data_state = EducationBL.material_delete(material)

    if isinstance(data_state, DataSuccess):
        admin_logger.info(
            f'–∞–¥–º–∏–Ω {callback_query.message.chat.full_name} —É–¥–∞–ª–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª {material.title}')
        await get_theme(state, callback_query.message, get_theme_menu_keyboard())
        await callback_query.message.answer(f"–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω!")
    else:
        await callback_query.message.answer(f'‚ùå {data_state.error_message}')