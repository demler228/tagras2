from typing import List

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from application.tg_bot.user.entities.user import User



class EmployeeCallback(CallbackData, prefix="employee"):
    action: str
    employee_id: int


class EmployeesCallbackFactory(CallbackData, prefix="employees"):
    offset: int


def get_employees_list_keyboard(employees: List[User], offset: int = 0, page_size: int = 10) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = offset * page_size
    end_idx = start_idx + page_size
    total_employees = len(employees)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for employee in employees[start_idx:end_idx]:
        builder.button(
            text=f"{employee.username}",
            callback_data=EmployeeCallback(action="view", employee_id=employee.id).pack()
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if offset > 0:
        builder.button(
            text="<--- ",
            callback_data=EmployeesCallbackFactory(offset=offset - 1)
        )

    if end_idx < total_employees:
        builder.button(
            text=" --->",
            callback_data=EmployeesCallbackFactory(offset=offset + 1)
        )

    builder.button(
        text="üîô –í –º–µ–Ω—é",
        callback_data="employee_back_button"
    )

    # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –∫–Ω–æ–ø–∫–∏: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω–æ
    builder.adjust(1, 2 if offset > 0 and end_idx < total_employees else 1, 1)

    return builder.as_markup()


def get_confirm_edit_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="employee_save"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="employee_edit"),
        ]
    ])

def get_edit_options_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ò–º—è", callback_data="edit_employee_name")],
        [InlineKeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_employee_phone")],
        [InlineKeyboardButton(text="üì± Username", callback_data="edit_employee_username")],
        [InlineKeyboardButton(text="üî¢ Telegram id", callback_data="edit_employee_telegram_id")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="confirm_data_employee_back")],
    ])

def get_back_employee_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="employee_back_button"),
        ]
    ])


def get_employee_action_keyboard(employee_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=EmployeeCallback(action="edit", employee_id=employee_id)
    )

    builder.button(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å",
        callback_data=EmployeeCallback(action="delete", employee_id=employee_id)
    )

    builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="get_employees_list_button"))

    return builder.as_markup()


