from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from domain.department_list.db_bl import DepartmentDbBl, EmployeeDbBl
from sympy.printing.precedence import precedence_Integer

from ..entities.department_list import Department, Employee
from utils.data_state import DataSuccess
from .keyboards.department_keyboard import (
    get_department_list_keyboard,
    get_department_employee_list_keyboard,
    get_department_employee_detail_keyboard,
    get_confirm_delete_keyboard,
    get_employee_edit_fields_keyboard,
    get_cancel_keyboard,
    back_to_dept,
    back_to_employees,
    back_to_employee_view
)
from .keyboards.callback_factories import (
    AdminDepartmentCallback,
    AdminDepartmentListCallback,
    AdminDepartmentEmployeeCallback,
    AdminDepartmentEmployeePageCallback,
    AdminConfirmCallback,
    AdminEmployeeEditFieldCallback,
)

from aiogram.fsm.state import State, StatesGroup

router = Router()


# ==== FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ====
class AddDepartmentState(StatesGroup):
    name = State()


class AddEmployeeState(StatesGroup):
    name = State()
    phone = State()
    description = State()


class EditEmployeeState(StatesGroup):
    field = State()
    value = State()


# ======= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ü–ò–°–ö–ê –û–¢–î–ï–õ–û–í =======


@router.callback_query(F.data == "department_list_button_admin")
@router.callback_query(F.data.startswith("admin_departments_page:"))
async def handle_admin_department_list(callback_query: CallbackQuery):
    if callback_query.data == "department_list_button_admin":
        page = 1
    else:
        callback_data = AdminDepartmentListCallback.unpack(callback_query.data)
        page = callback_data.page
    departments_state = DepartmentDbBl.get_department_list()
    if not isinstance(departments_state, DataSuccess):
        await callback_query.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤")
        return
    departments = departments_state.data

    await callback_query.message.edit_text(
        text="üìã –°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤:",
        reply_markup=get_department_list_keyboard(departments, page, admin=True),
    )


# ======= –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–î–ï–õ–ê =======


@router.callback_query(AdminDepartmentCallback.filter(F.action == "view"))
@router.callback_query(AdminDepartmentEmployeePageCallback.filter())
async def handle_admin_department_view(callback: CallbackQuery, callback_data):
    department_id = callback_data.department_id
    page = getattr(callback_data, "page", 1)
    employees_state = EmployeeDbBl.get_employee_list(department_id)
    if not isinstance(employees_state, DataSuccess):
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        return
    employees = employees_state.data

    await callback.message.edit_text(
        text="üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞:",
        reply_markup=get_department_employee_list_keyboard(
            employees, department_id, page, admin=True
        ),
    )


@router.callback_query(F.data == "add_department_button")
async def handle_add_department_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddDepartmentState.name)
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞:", reply_markup=get_cancel_keyboard()
    )


@router.message(AddDepartmentState.name, F.text)
async def process_add_department_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    department = Department(name=name)
    result = DepartmentDbBl.create_department(department)
    if isinstance(result, DataSuccess):
        await message.answer(
            text=f"‚úÖ –û—Ç–¥–µ–ª '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=back_to_dept()
        )
    else:
        await message.answer(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞: {result.message}",
            reply_markup=back_to_dept(),
        )
    await state.clear()


# ======= –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê =======


@router.callback_query(AdminDepartmentCallback.filter(F.action == "add_employee"))
async def handle_add_employee_start(
    callback: CallbackQuery, callback_data: AdminDepartmentCallback, state: FSMContext
):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    await state.update_data(department_id=callback_data.department_id)
    await state.set_state(AddEmployeeState.name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        reply_markup=get_cancel_keyboard("department_list_button_admin"),
    )


@router.message(AddEmployeeState.name, F.text)
async def process_employee_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        return

    await state.update_data(name=name)
    await state.set_state(AddEmployeeState.phone)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏–ª–∏ '-', –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω):",
        reply_markup=get_cancel_keyboard("department_list_button_admin"),
    )


@router.message(AddEmployeeState.phone, F.text)
async def process_employee_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    phone = message.text.strip()
    phone = None if phone == "-" else phone
    await state.update_data(phone=phone)
    await state.set_state(AddEmployeeState.description)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏–ª–∏ '-', –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ):",
        reply_markup=get_cancel_keyboard("department_list_button_admin"),
    )


@router.message(AddEmployeeState.description, F.text)
async def process_employee_description(message: Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    description = message.text.strip()
    description = None if description == "-" else description

    data = await state.get_data()
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    employee = Employee(
        name=data["name"],
        phone=data.get("phone"),
        description=description,
        department_id=data["department_id"],
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    result = EmployeeDbBl.create_employee(employee)

    if isinstance(result, DataSuccess):
        await message.answer(
            text="‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=back_to_employees(data["department_id"]),
        )
    else:
        await message.answer(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {result.message}",
            reply_markup=back_to_employees(data["department_id"]),
        )

    await state.clear()


# ======= –£–î–ê–õ–ï–ù–ò–ï –û–¢–î–ï–õ–ê =======


@router.callback_query(AdminDepartmentCallback.filter(F.action == "delete"))
async def handle_delete_department(
    callback: CallbackQuery, callback_data: AdminDepartmentCallback
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞"""
    await callback.message.edit_text(
        text="‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª –∏ –≤—Å–µ—Ö –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?",
        reply_markup=get_confirm_delete_keyboard(
            entity_id=callback_data.department_id, target="department"
        ),
    )


@router.callback_query(AdminConfirmCallback.filter(F.target == "department"))
async def confirm_delete_department(
    callback: CallbackQuery, callback_data: AdminConfirmCallback
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    department_id = callback_data.entity_id
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    dept_state = DepartmentDbBl.get_department_details(department_id)
    if not isinstance(dept_state, DataSuccess):
        await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    result = DepartmentDbBl.delete_department(department_id)
    if isinstance(result, DataSuccess):
        await callback.message.edit_text(
            text=f"‚úÖ –û—Ç–¥–µ–ª '{dept_state.data.name}' –∏ –≤—Å–µ –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã",
            reply_markup=back_to_dept(),
        )
    else:
        await callback.message.edit_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {result.message}\n\n",
            reply_markup=back_to_dept(),
        )


# ======= –ü–†–û–°–ú–û–¢–† –ò–ù–§–û –û –°–û–¢–†–£–î–ù–ò–ö–ï =======


@router.callback_query(AdminDepartmentEmployeeCallback.filter(F.action == "view"))
async def handle_view_employee(
    callback: CallbackQuery, callback_data: AdminDepartmentEmployeeCallback
):
    employee_state = EmployeeDbBl.get_employee_details(callback_data.employee_id)
    if not isinstance(employee_state, DataSuccess):
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        return

    employee = employee_state.data
    await callback.message.edit_text(
        text=(
            f"üë§ {employee.name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {employee.phone or '–Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {employee.description or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
        ),
        reply_markup=get_department_employee_detail_keyboard(
            employee.id, employee.department_id, admin=True
        ),
    )


# ======= –£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê =======


@router.callback_query(AdminDepartmentEmployeeCallback.filter(F.action == "delete"))
async def handle_delete_employee_request(
    callback: CallbackQuery, callback_data: AdminDepartmentEmployeeCallback
):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    employee_state = EmployeeDbBl.get_employee_details(callback_data.employee_id)

    if not isinstance(employee_state, DataSuccess):
        await callback.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    employee = employee_state.data

    await callback.message.edit_text(
        text=f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.name}?",
        reply_markup=get_confirm_delete_keyboard(
            entity_id=callback_data.employee_id, target="employee"
        ),
    )


@router.callback_query(AdminConfirmCallback.filter(F.target == "employee"))
async def handle_confirm_delete_employee(
    callback: CallbackQuery, callback_data: AdminConfirmCallback
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    employee_state = EmployeeDbBl.get_employee_details(callback_data.entity_id)

    if not isinstance(employee_state, DataSuccess):
        await callback.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    employee = employee_state.data

    # –£–¥–∞–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    result = EmployeeDbBl.delete_employee(callback_data.entity_id)
    if isinstance(result, DataSuccess):
        await callback.message.edit_text(
            text=f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω",
            reply_markup=back_to_employees(employee.department_id),
        )
    else:
        await callback.answer(
            text=f"–û—à–∏–±–∫–∞: {result.message}",
            show_alert=True
        )


# ======= –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê =======


@router.callback_query(AdminDepartmentEmployeeCallback.filter(F.action == "edit"))
async def handle_edit_employee_start(
        callback: CallbackQuery,
        callback_data: AdminDepartmentEmployeeCallback
):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–æ—Ä –ø–æ–ª—è"""
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_employee_edit_fields_keyboard(callback_data.employee_id)
    )


@router.callback_query(AdminEmployeeEditFieldCallback.filter())
async def handle_choose_edit_field(
        callback: CallbackQuery,
        callback_data: AdminEmployeeEditFieldCallback,
        state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.update_data(
        employee_id=callback_data.employee_id,
        field=callback_data.field
    )

    field_descriptions = {
        "name": "–∏–º—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –Ω–µ–ª—å–∑—è –æ—á–∏—Å—Ç–∏—Ç—å)",
        "phone": "—Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤–≤–µ–¥–∏—Ç–µ '-', —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å)",
        "description": "–æ–ø–∏—Å–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ '-', —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å)"
    }

    await state.set_state(EditEmployeeState.value)
    await callback.message.edit_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_descriptions[callback_data.field]}:",
        reply_markup=get_cancel_keyboard(
            AdminDepartmentEmployeeCallback(
                action="view",
                employee_id=callback_data.employee_id
            ).pack()
        )
    )


@router.message(EditEmployeeState.value, F.text)
async def handle_edit_field_value(
        message: Message,
        state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
    data = await state.get_data()
    field = data["field"]
    employee_id = data["employee_id"]
    value = message.text.strip()

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
    if field == "name":
        if not value or value == "-":
            await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    else:  # phone –∏–ª–∏ description
        value = None if value == "-" else value

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –ë–î
    result = EmployeeDbBl.update_employee_field(employee_id, field, value)

    if isinstance(result, DataSuccess):
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee_state = EmployeeDbBl.get_employee_details(employee_id)
        if isinstance(employee_state, DataSuccess):
            employee = employee_state.data
            await message.answer(
                text=f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=back_to_employee_view(employee.id, employee.department_id)
            )
    else:
        await message.answer(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {result.message}",
            reply_markup=back_to_employee_view(employee_id, data.get("department_id"))
        )

    await state.clear()
