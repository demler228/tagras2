from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from utils.data_state import DataSuccess, DataState

from domain.department_list.db_bl import DepartmentDbBl, EmployeeDbBl
from .keyboards.callback_factories import (
    DepartmentCallback,
    DepartmentEmployeeCallback,
    DepartmentListCallback,
    DepartmentEmployeePageCallback)

from .keyboards.department_keyboard import (
    get_department_list_keyboard,
    get_department_employee_list_keyboard,
    get_department_employee_detail_keyboard,
)

router = Router()

@router.callback_query(F.data.startswith("departments_page:"))
@router.callback_query(F.data == "department_list_button")
async def handle_department_list(callback_query: CallbackQuery):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if callback_query.data == "department_list_button":
        page = 1
    else:
        # –ü–∞—Ä—Å–∏–º callback_data —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        callback_data = DepartmentListCallback.unpack(callback_query.data)
        page = callback_data.page

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª—ã
    departments_state = DepartmentDbBl.get_department_list()
    if not isinstance(departments_state, DataSuccess):
        await callback_query.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª–æ–≤")
        return

    departments = departments_state.data

    try:
        await callback_query.message.edit_text(
            text="–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤:",
            reply_markup=get_department_list_keyboard(departments, page=page)
        )
    except TelegramBadRequest as e:
        await callback_query.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

@router.callback_query(DepartmentEmployeePageCallback.filter())
@router.callback_query(DepartmentCallback.filter(F.action == "view"))
async def handle_department_employees(
    callback: CallbackQuery,
    callback_data: DepartmentCallback | DepartmentEmployeePageCallback,
):
    # –û–ø—Ä–µ–¥–µ–ª–∏–º department_id –∏ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    department_id = callback_data.department_id
    page = getattr(callback_data, "page", 1)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    employees_state = EmployeeDbBl.get_employee_list(department_id)
    if not isinstance(employees_state, DataSuccess):
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        return

    employees = employees_state.data
    if not employees:
        await callback.answer("–í —ç—Ç–æ–º –æ—Ç–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        return

    try:
        await callback.message.edit_text(
            text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞:",
            reply_markup=get_department_employee_list_keyboard(
                employees=employees,
                department_id=department_id,
                page=page
            )
        )
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(DepartmentEmployeeCallback.filter(F.action == "view"))
async def handle_view_employee(
        callback: CallbackQuery,
        callback_data: DepartmentEmployeeCallback
):
    employee_state = EmployeeDbBl.get_employee_details(callback_data.employee_id)

    if not isinstance(employee_state, DataSuccess):
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        return

    employee = employee_state.data
    await callback.message.edit_text(
        text=(
            f"üë§ {employee.name}\n\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {employee.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {employee.description or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        ),
        reply_markup=get_department_employee_detail_keyboard(
            employee_id=employee.id,
            department_id=employee.department_id
        )
    )
