import datetime
from aiogram import Router, F, types
from application.tg_bot.events.personal_actions.keyboards.events_keyboard import EventsCallbackFactory, \
    get_events_keyboard
from domain.events.db_bl import EventDbBl
from utils.data_state import DataSuccess
from utils.get_week_start_end import get_week_start_end

router = Router()

week_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

@router.callback_query(F.data == "events_button")
@router.callback_query(EventsCallbackFactory.filter())
async def handle_events_button(callback_query: types.CallbackQuery, callback_data:EventsCallbackFactory=None):
    await callback_query.message.delete()

    telegram_id = callback_query.from_user.id
    offset = 0
    if callback_data:
        offset = callback_data.offset
    start_date, end_date = get_week_start_end(datetime.date.today(), offset)

    data_state = EventDbBl.get_events_by_telegram_id(telegram_id, start_date, end_date)
    if isinstance(data_state, DataSuccess):
        events = data_state.data
        if offset == 0:
            text = "üóìÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:"
        elif offset == -1:
            text = "üóìÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é"
        elif offset == 1:
            text = "üóìÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"
        else:
            text = f'üóìÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞ {start_date.strftime("%d.%m.%Y")} –ø–æ {(end_date - datetime.timedelta(days=1)).strftime("%d.%m.%Y")}'
        # –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
        for i,day in enumerate(week_days):
            current_date = start_date + datetime.timedelta(days=i)
            text += f'\n{day} {current_date.strftime("%d.%m.%Y")}:'
            this_day_events = [] # —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ç–æ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            for event in events:
                if event.date.day == current_date.day:
                    this_day_events.append(event)
                    text += f'\n\t\t<b>{event.name}</b> - {event.description}'
            if len(this_day_events) == 0:
                text+='\n\t\t–ù–µ—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.'
            text += '\n'

        await callback_query.message.answer(
            text,
            parse_mode='HTML',
            reply_markup=get_events_keyboard(offset=offset)
        )
    else:
        await callback_query.message.answer(
           f'‚ùå {data_state.error_message}')

