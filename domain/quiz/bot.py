import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from main import main as generate_quiz  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TELEGRAM_TOKEN = "7607849811:AAFYhxA4077tQqHbCdc6zDxU2iFPP34xU1k"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∫–≤–∏–∑–æ–≤
user_materials = {}
user_quizzes = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_materials[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_quizzes[user_id] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    keyboard = [["–û–±—É—á–µ–Ω–∏–µ", "–ö–≤–∏–∑"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—É—á–µ–Ω–∏–µ"
async def handle_learning(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–≤–∏–¥–µ–æ, PDF, Word, —Å—Å—ã–ª–∫–∏). "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done."
    )

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
async def download_file(file_id, file_name, context: CallbackContext):
    file = await context.bot.get_file(file_id)
    file_path = os.path.join("downloads", file_name)
    await file.download_to_drive(file_path)
    return file_path

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async def handle_materials(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_materials[user_id], –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_id not in user_materials:
        user_materials[user_id] = []

    file = update.message.document or update.message.video or update.message.text

    if file:
        if update.message.document:
            file_id = update.message.document.file_id
            file_name = update.message.document.file_name
            file_path = await download_file(file_id, file_name, context)
        elif update.message.video:
            file_id = update.message.video.file_id
            file_name = "video.mp4"
            file_path = await download_file(file_id, file_name, context)
        else:
            file_id = None
            file_name = update.message.text
            file_path = file_name  # –î–ª—è —Å—Å—ã–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø—É—Ç—å

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        user_materials[user_id].append((file_path, file_name))
        await update.message.reply_text(f"–ú–∞—Ç–µ—Ä–∏–∞–ª '{file_name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async def done(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_materials[user_id], –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_id not in user_materials:
        user_materials[user_id] = []

    await update.message.reply_text(
        f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(user_materials[user_id])}."
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
async def send_quiz_questions(update: Update, quiz_result):
    for question_data in quiz_result:
        question = question_data["question"]
        answers = "\n".join([f"{i + 1}. {answer}" for i, answer in enumerate(question_data["answers"])])
        message = f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question}\n\nüìù –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{answers}"
        await update.message.reply_text(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–≤–∏–∑"
async def handle_quiz(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_materials[user_id], –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_id not in user_materials:
        user_materials[user_id] = []

    if not user_materials[user_id]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–û–±—É—á–µ–Ω–∏–µ'.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∏–∑–∞
    materials = [material[0] for material in user_materials[user_id]]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º/—Å—Å—ã–ª–∫–∞–º
    quiz_result = generate_quiz(materials)

    if quiz_result:
        user_quizzes[user_id] = quiz_result
        await update.message.reply_text("–ö–≤–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç –≤–æ–ø—Ä–æ—Å—ã:")
        await send_quiz_questions(update, quiz_result)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∏–∑–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists("downloads"):
        os.makedirs("downloads")

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^–û–±—É—á–µ–Ω–∏–µ$"), handle_learning))
    application.add_handler(MessageHandler(filters.Regex("^–ö–≤–∏–∑$"), handle_quiz))
    application.add_handler(MessageHandler(filters.Document.ALL | filters.VIDEO | filters.TEXT, handle_materials))
    application.add_handler(CommandHandler("done", done))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()